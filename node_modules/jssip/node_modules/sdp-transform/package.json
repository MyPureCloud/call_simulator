{
  "name": "sdp-transform",
  "description": "A simple parser/writer for the Session Description Protocol",
  "author": {
    "name": "Eirik Albrigtsen",
    "email": "analsandblaster@gmail.com"
  },
  "version": "1.5.3",
  "repository": {
    "type": "git",
    "url": "git://github.com/clux/sdp-transform"
  },
  "keywords": [
    "sdp",
    "webrtc",
    "serializer"
  ],
  "main": "./lib/",
  "bin": {
    "sdp-verify": "./checker.js"
  },
  "scripts": {
    "test": "nodeunit --reporter=verbose test/*.js",
    "coverage": "jscoverage lib && SDP_TRANSFORM_COV=1 nodeunit --reporter=lcov test"
  },
  "dependencies": {},
  "devDependencies": {
    "jscoverage": "^0.5.5",
    "nodeunit": "^0.9.0"
  },
  "bugs": {
    "url": "http://github.com/clux/sdp-transform/issues"
  },
  "license": "MIT",
  "readme": "# SDP Transform\n[![npm status](http://img.shields.io/npm/v/sdp-transform.svg)](https://www.npmjs.org/package/sdp-transform)\n[![build status](https://secure.travis-ci.org/clux/sdp-transform.svg)](http://travis-ci.org/clux/sdp-transform)\n[![dependency status](https://david-dm.org/clux/sdp-transform.svg)](https://david-dm.org/clux/sdp-transform)\n[![coverage status](http://img.shields.io/coveralls/clux/sdp-transform.svg)](https://coveralls.io/r/clux/sdp-transform)\n\nA simple parser and writer of SDP. Defines internal grammar based on [RFC4566 - SDP](http://tools.ietf.org/html/rfc4566), [RFC5245 - ICE](http://tools.ietf.org/html/rfc5245), and many more.\n\nFor simplicity it will force values that are integers to integers and leave everything else as strings when parsing. The module should be simple to extend or build upon, and is constructed rigorously.\n\n\n## Usage - Parser\nRequire it and pass it an unprocessed SDP string.\n\n```js\nvar transform = require('sdp-transform');\n\nvar sdpStr = \"v=0\\r\\n\\\no=- 20518 0 IN IP4 203.0.113.1\\r\\n\\\ns= \\r\\n\\\nt=0 0\\r\\n\\\nc=IN IP4 203.0.113.1\\r\\n\\\na=ice-ufrag:F7gI\\r\\n\\\na=ice-pwd:x9cml/YzichV2+XlhiMu8g\\r\\n\\\na=fingerprint:sha-1 42:89:c5:c6:55:9d:6e:c8:e8:83:55:2a:39:f9:b6:eb:e9:a3:a9:e7\\r\\n\\\nm=audio 54400 RTP/SAVPF 0 96\\r\\n\\\na=rtpmap:0 PCMU/8000\\r\\n\\\na=rtpmap:96 opus/48000\\r\\n\\\na=ptime:20\\r\\n\\\na=sendrecv\\r\\n\\\na=candidate:0 1 UDP 2113667327 203.0.113.1 54400 typ host\\r\\n\\\na=candidate:1 2 UDP 2113667326 203.0.113.1 54401 typ host\\r\\n\\\nm=video 55400 RTP/SAVPF 97 98\\r\\n\\\na=rtpmap:97 H264/90000\\r\\n\\\na=fmtp:97 profile-level-id=4d0028;packetization-mode=1\\r\\n\\\na=rtpmap:98 VP8/90000\\r\\n\\\na=sendrecv\\r\\n\\\na=candidate:0 1 UDP 2113667327 203.0.113.1 55400 typ host\\r\\n\\\na=candidate:1 2 UDP 2113667326 203.0.113.1 55401 typ host\\r\\n\\\n\";\n\nvar res = transform.parse(sdpStr);\n\nres;\n{ version: 0,\n  origin:\n   { username: '-',\n     sessionId: 20518,\n     sessionVersion: 0,\n     netType: 'IN',\n     ipVer: 4,\n     address: '203.0.113.1' },\n  name: '',\n  timing: { start: 0, stop: 0 },\n  connection: { version: 4, ip: '203.0.113.1' },\n  iceUfrag: 'F7gI',\n  icePwd: 'x9cml/YzichV2+XlhiMu8g',\n  fingerprint:\n   { type: 'sha-1',\n     hash: '42:89:c5:c6:55:9d:6e:c8:e8:83:55:2a:39:f9:b6:eb:e9:a3:a9:e7' },\n  media:\n   [ { rtp: [Object],\n       fmtp: [],\n       type: 'audio',\n       port: 54400,\n       protocol: 'RTP/SAVPF',\n       payloads: '0 96',\n       ptime: 20,\n       direction: 'sendrecv',\n       candidates: [Object] },\n     { rtp: [Object],\n       fmtp: [Object],\n       type: 'video',\n       port: 55400,\n       protocol: 'RTP/SAVPF',\n       payloads: '97 98',\n       direction: 'sendrecv',\n       candidates: [Object] } ] }\n\n\n// each media line is parsed into the following format\nres.media[1];\n{ rtp:\n   [ { payload: 97,\n       codec: 'H264',\n       rate: 90000 },\n     { payload: 98,\n       codec: 'VP8',\n       rate: 90000 } ],\n  fmtp:\n   [ { payload: 97,\n       config: 'profile-level-id=4d0028;packetization-mode=1' } ],\n  type: 'video',\n  port: 55400,\n  protocol: 'RTP/SAVPF',\n  payloads: '97 98',\n  direction: 'sendrecv',\n  candidates:\n   [ { foundation: 0,\n       component: 1,\n       transport: 'UDP',\n       priority: 2113667327,\n       ip: '203.0.113.1',\n       port: 55400,\n       type: 'host' },\n     { foundation: 1,\n       component: 2,\n       transport: 'UDP',\n       priority: 2113667326,\n       ip: '203.0.113.1',\n       port: 55401,\n       type: 'host' } ] }\n```\n\nIn this example, only slightly dodgy string coercion case here is for `candidates[i].foundation`, which can be a string, but in this case can be equally parsed as an integer.\n\n### Parser Postprocessing\nNo excess parsing is done to the raw strings apart from maybe coercing to ints, because the writer is built to be the inverse of the parser. That said, a few helpers have been built in:\n\n```js\n// to parse the fmtp.config from the previous example\ntransform.parseFmtpConfig(res.media[1].fmtp[0].config);\n{ 'profile-level-id': '4d0028',\n  'packetization-mode': 1 }\n\n// what payloads where actually advertised in the main m-line ?\ntransform.parsePayloads(res.media[1].payloads);\n[97, 98]\n```\n\n\n## Usage - Writer\nThe writer is the inverse of the parser, and will need a struct equivalent to the one returned by it.\n\n```js\ntransform.write(res).split('\\r\\n'); // res parsed above\n[ 'v=0',\n  'o=- 20518 0 IN IP4 203.0.113.1',\n  's= ',\n  'c=IN IP4 203.0.113.1',\n  't=0 0',\n  'a=ice-ufrag:F7gI',\n  'a=ice-pwd:x9cml/YzichV2+XlhiMu8g',\n  'a=fingerprint:sha-1 42:89:c5:c6:55:9d:6e:c8:e8:83:55:2a:39:f9:b6:eb:e9:a3:a9:e7',\n  'm=audio 54400 RTP/SAVPF 0 96',\n  'a=rtpmap:0 PCMU/8000',\n  'a=rtpmap:96 opus/48000',\n  'a=ptime:20',\n  'a=sendrecv',\n  'a=candidate:0 1 UDP 2113667327 203.0.113.1 54400 typ host',\n  'a=candidate:1 2 UDP 2113667326 203.0.113.1 54401 typ host',\n  'm=video 55400 RTP/SAVPF 97 98',\n  'a=rtpmap:97 H264/90000',\n  'a=rtpmap:98 VP8/90000',\n  'a=fmtp:97 profile-level-id=4d0028;packetization-mode=1',\n  'a=sendrecv',\n  'a=candidate:0 1 UDP 2113667327 203.0.113.1 55400 typ host',\n  'a=candidate:1 2 UDP 2113667326 203.0.113.1 55401 typ host' ]\n```\n\nThe only thing different from the original input is we follow the order specified by the SDP RFC, and we will always do so.\n\n## Installation\nInstall locally from npm:\n\n```bash\n$ npm install sdp-transform\n```\n\n## License\nMIT-Licensed. See LICENSE file for details.\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/clux/sdp-transform",
  "_id": "sdp-transform@1.5.3",
  "dist": {
    "shasum": "3a7bf2940f2f3a6d6d86ddf35f81159d6d89e2bc"
  },
  "_from": "sdp-transform@~1.5.3",
  "_resolved": "https://registry.npmjs.org/sdp-transform/-/sdp-transform-1.5.3.tgz"
}
